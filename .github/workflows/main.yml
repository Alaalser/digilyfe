name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run OWASP Dependency-Check via Docker
        run: |
          mkdir -p reports
          docker run --rm \
            -v $(pwd):/src \
            -v $(pwd)/reports:/report \
            owasp/dependency-check \
            --project "Simple-HTTP-App" \
            --scan /src \
            --format "HTML" \
            --out /report

      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/dependency-check-report.html

      - name: Build and run docker-compose
        run: docker-compose up -d --build

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/library/simple-http-app_web'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: 'true'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Verify application
        run: |
          sleep 5 # Give the container time to start
          curl http://localhost:8080 | grep "hello world"

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: simple-http-app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to ECS
        run: |
          chmod +x deploy.sh
          ./deploy.sh
