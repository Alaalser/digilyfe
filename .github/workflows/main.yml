name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'simple-http-app'
          scan: './app'
          format: 'HTML'
          fail-on-cvss: '7'

      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v4
        if: always() # Always upload the report, even if the scan fails
        with:
          name: dependency-check-report
          path: reports/

      - name: Build and run Docker Compose
        run: docker compose up -d --build

      - name: Get Docker image ID
        id: get-image
        run: |
          IMAGE_ID=$(docker compose images -q web)
          if [ -z "$IMAGE_ID" ]; then
            echo "No image found for service web"
            exit 1
          fi
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Run Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_ID }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Verify application is running
        run: |
          echo "Waiting for app to start..."
          sleep 10
          curl -f http://localhost:8080 | grep -i "hello world"

      - name: Cleanup
        if: always()
        run: |
          docker-compose down || true

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: simple-http-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image_uri_sha=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_uri_latest=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Scan image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image_uri_sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ steps.build-image.outputs.image_uri_sha }}
          docker push ${{ steps.build-image.outputs.image_uri_latest }}

      - name: Deploy to ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: simple-http-app
          IMAGE_TAG: latest
        run: |
          chmod +x deploy.sh
          ECS_EXECUTION_ROLE_ARN="${{ secrets.ECS_EXECUTION_ROLE_ARN }}" \
          SUBNET_ID="${{ secrets.SUBNET_ID }}" \
          SECURITY_GROUP_ID="${{ secrets.SECURITY_GROUP_ID }}" \
          ./deploy.sh
