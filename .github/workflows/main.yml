name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and run Docker Compose
        run: docker compose up -d --build


      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.0

      - name: Scan Python dependencies with Trivy (requirements.txt)
        run: |
          trivy fs \
            --exit-code 0 \
            --severity CRITICAL,HIGH \
            --vuln-type library \
            app/

      - name: Scan Docker image with Trivy
        run: |
          IMAGE_ID=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep 'simple-http-app_web' || true)
          if [ -z "$IMAGE_ID" ]; then
            echo "Image not found for Trivy scan"
            exit 1
          fi

          trivy image \
            --format table \
            --exit-code 0 \
            --ignore-unfixed \
            --vuln-type os,library \
            --severity CRITICAL,HIGH \
            "$IMAGE_ID"

      - name: Verify application is running
        run: |
          echo "Waiting for app to start..."
          sleep 10
          curl -f http://localhost:8080 | grep -i "hello world"

      - name: Cleanup
        if: always()
        run: |
          docker-compose down || true
          docker system prune -f -a --volumes -y || true

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: simple-http-app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to ECS
        run: |
          chmod +x deploy.sh
          ./deploy.sh
